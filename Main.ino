/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/55c7aba9-e82d-41c7-b0d1-3d9c6e970038 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidityLevel;
  float temperatureLevel;
  int garbageLevel;
  int smokeLevel;
  bool led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

const int pingPin = 26;// Sets the trigger Pin
const int echoPin = 27;
const int smokePin = 34;
const int buzzerPin = 32;

long duration;
int distance;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  pinMode(pingPin, OUTPUT); // Sets the trigger Pin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  pinMode(smokePin,INPUT);
  pinMode(buzzerPin,OUTPUT);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(100); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  digitalWrite(pingPin, LOW); // Clears the trigger Pin
  delayMicroseconds(2);
  
  digitalWrite(pingPin, HIGH);// Sets the trigger Pin on HIGH state for 10 micro seconds
  delayMicroseconds(10);
  
  digitalWrite(pingPin, LOW);
  
  duration = pulseIn(echoPin, HIGH);// Reads the echoPin, returns the sound wave travel time in microseconds
  
  distance = duration * 0.034 / 2;// Calculating the distance

  Serial.print("Distance: ");
  Serial.println(distance);
  garbageLevel=map(distance,5,35,100,0);
  Serial.print("level: ");
  Serial.println(garbageLevel);
  
  int analogSensor = analogRead(smokePin);
  smokeLevel=map(analogSensor,0,400,0,100);
  Serial.println(smokeLevel);
  
    if (smokeLevel>200){
    digitalWrite(buzzerPin, HIGH);
    delay(500);
    digitalWrite(buzzerPin, LOW);
    delay(500);
  }
  else
  {
     digitalWrite(buzzerPin, HIGH);
  
  }
  if (smokeLevel>200){
    led=true;
    delay(30);
    led=false;
    delay(30);
  }
  else{
    led=false;
  }
    
  
}










